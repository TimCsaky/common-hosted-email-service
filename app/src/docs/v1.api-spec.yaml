---
openapi: 3.0.0
info:
  version: 1.0.0
  title: Common Hosted Email Service API
  description: CHES - Powered by NodeMailer (a shared library)
  license:
    name: Apache 2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0.html'
  contact:
    name: NR Common Service Showcase
    email: NR.CommonServiceShowcase@gov.bc.ca
servers:
  - url: /api/v1
    description: This Server
security:
  - OpenID: []
paths:
  /health:
    get:
      summary: Returns status of correspondent APIs
      operationId: getChecksStatus
      tags:
        - Health
      responses:
        '200':
          description: Returns the healthiness of the correspondent API endpoint(s)
          content:
            application/json:
              schema:
                type: object
                required:
                  - endpoints
                properties:
                  endpoints:
                    type: array
                    description: A list of Endpoint Statuses
                    items:
                      $ref: '#/components/schemas/EndpointStatus'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/Forbidden'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /email:
    post:
      summary: Send an email
      operationId: postEmail
      tags:
        - Email
      security:
        - OpenID:
            - EMAILER
      parameters:
        - in: query
          name: devMode
          description: Send output to Ethereal for testing if true
          schema:
            type: boolean
      requestBody:
        description: Fields required to perform a mail merge and send
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageObject'
      responses:
        '201':
          description: Returns the message correspondence id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/Forbidden'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /emailMerge:
    post:
      summary: Template mail merge & email sending
      operationId: postMerge
      tags:
        - EmailMerge
      security:
        - OpenID:
            - EMAILER
      parameters:
        - in: query
          name: devMode
          description: Send output to Ethereal for testing if true
          schema:
            type: boolean
      requestBody:
        description: Fields required to perform a mail merge and send
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MergeRequest'
      responses:
        '201':
          description: Returns an array of message correspondence ids
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MergeResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/Forbidden'
        default:
          $ref: '#/components/responses/Error'
  /emailMerge/preview:
    post:
      summary: Template mail merge validation & preview
      operationId: postPreview
      tags:
        - Preview
      security:
        - OpenID:
            - EMAILER
      requestBody:
        description: Fields required to perform a mail merge and send
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MergeRequest'
      responses:
        '200':
          description: Responds with the result of the validation
          content:
            application/json:
              schema:
                type: array
                description: A list of merged message objects
                items:
                  $ref: '#/components/schemas/MessageObject'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/Forbidden'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /status:
    parameters:
      - $ref: '#/components/parameters/StatusFilter'
    get:
      summary: Queryable message transaction status
      operationId: GetStatusQuery
      tags:
        - Status
      security:
        - OpenID:
            - EMAILER
      parameters:
        - in: query
          name: tag
          description: The desired messages with the specified tag association
          schema:
            type: string
          example: tag
        - in: query
          name: txId
          description: The desired messages associated with the transaction uuid
          schema:
            type: string
            format: uuid
          example: 00000000-0000-0000-0000-000000000000
        - in: query
          name: status
          description: Yield messages in the specified status
          schema:
            type: string
            enum:
              - active
              - completed
              - delayed
              - failed
              - paused
              - stuck
              - waiting
          example: completed
      responses:
        '200':
          description: Returns the status of message transactions
          content:
            application/json:
              schema:
                type: array
                description: A list of message statuses
                items:
                  $ref: '#/components/schemas/StatusObject'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/Forbidden'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/status/{msgId}':
    parameters:
      - in: path
        name: msgId
        description: Uuid of the message
        required: true
        schema:
          type: string
          format: uuid
          example: 00000000-0000-0000-0000-000000000000
      - $ref: '#/components/parameters/StatusFilter'
    get:
      summary: Status of a single message
      operationId: GetStatusMessage
      tags:
        - Status
      security:
        - OpenID:
            - EMAILER
      responses:
        '200':
          description: Returns the status of the message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusObject'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  parameters:
    StatusFilter:
      in: query
      name: filter
      description: >-
        Filter the response to only yield the specified set of comma separated
        fields.
      schema:
        type: string
        enum:
          - delayUntil
          - log
          - result
          - status
          - tag
          - timestamp
      example: 'log,status,timestamp'
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    OpenID:
      type: openIdConnect
      openIdConnectUrl: >-
        https://sso.pathfinder.gov.bc.ca/auth/realms/jbd6rnxw/.well-known/openid-configuration
  schemas:
    AttachmentObject:
      type: object
      properties:
        content:
          type: string
          description: 'String, Buffer or a Stream contents for the attachment'
          example: PGI+SGVsbG8gV29ybGRcITwvYj4=
        contentType:
          type: string
          description: >-
            Optional content type for the attachment, if not set will be derived
            from the filename property
        encoding:
          type: string
          description: >-
            If set and content is string, then encodes the content to a Buffer
            using the specified encoding. Example values: 'base64', 'hex',
            'binary' etc. Useful if you want to use binary attachments in a JSON
            formatted email object.
          enum:
            - base64
            - binary
            - hex
          example: base64
        filename:
          type: string
          description: >-
            Filename to be reported as the name of the attached file. Use of
            unicode is allowed.
          example: testfile.txt
    BadRequest:
      allOf:
        - $ref: '#/components/schemas/Problem'
        - type: object
          required:
            - errors
          properties:
            errors:
              type: array
              description: An array of detected errors
              items:
                $ref: '#/components/schemas/ValidationError'
            status:
              example: 400
            title:
              example: Bad Request
            type:
              example: 'https://httpstatuses.com/400'
    ContextObject:
      type: object
      required:
        - context
        - to
      properties:
        bcc:
          type: array
          items:
            type: string
          description: >-
            An array of recipients email addresses that will appear on the bcc:
            field
          example:
            - foo@gov.bc.ca
        cc:
          type: array
          items:
            type: string
          description: >-
            An array of recipients email addresses that will appear on the cc:
            field
          example:
            - fizz@gov.bc.ca
        context:
          type: object
          description: >-
            A freeform JSON object of key-value pairs.  All keys must be
            alphanumeric or underscore.
          example:
            something:
              greeting: Hello
              target: World
            someone: user
        delay:
          type: integer
          description: number of milliseconds to delay this message before queueing
          example: 60000
        to:
          type: array
          items:
            type: string
          description: >-
            An array of recipients email addresses that will appear on the To:
            field
          example:
            - baz@gov.bc.ca
    EndpointStatus:
      type: object
      required:
        - name
        - endpoint
        - healthCheck
        - authenticated
        - authorized
      properties:
        name:
          type: string
          description: The name of the endpoint
          example: Example API
        endpoint:
          type: string
          description: Base endpoint URL
          example: 'https://example.com/v1/'
        healthCheck:
          type: boolean
          description: Is the endpoint reachable
        authenticated:
          type: boolean
          description: Are credentials valid to access endpoint
        authorized:
          type: boolean
          description: Do the credentials have the right permissions
    Error:
      allOf:
        - $ref: '#/components/schemas/Problem'
        - type: object
          properties:
            status:
              example: 500
            title:
              example: Internal Server Error
            type:
              example: 'https://httpstatuses.com/500'
    MergeRequest:
      type: object
      required:
        - bodyType
        - body
        - contexts
        - from
        - subject
      properties:
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/AttachmentObject'
        bodyType:
          type: string
          description: 'The email body type (html = content with html, text = plaintext)'
          enum:
            - html
            - text
          example: html
        body:
          type: string
          description: >-
            A Nunjucks compatible body template of the message as an Unicode
            string, Buffer, Stream or an attachment-like object. Refer to
            https://mozilla.github.io/nunjucks/templating.html for template
            syntax.
          example: '{{ something.greeting }} {{ something.target }} content'
        contexts:
          type: array
          description: An array of context objects
          items:
            $ref: '#/components/schemas/ContextObject'
        encoding:
          type: string
          description: >-
            Identifies encoding for text/html strings (defaults to 'utf-8',
            other values are 'hex' and 'base64')
          enum:
            - base64
            - binary
            - hex
            - utf-8
          example: utf-8
        from:
          type: string
          description: >-
            The email address of the sender. All email addresses can be plain
            'sender@server.com' or formatted '"Sender Name" sender@server.com'
          example: example@gov.bc.ca
        priority:
          type: string
          description: >-
            Sets message importance headers, either 'high', 'normal' (default)
            or 'low'.
          enum:
            - normal
            - low
            - high
          example: normal
        subject:
          type: string
          description: The email subject
          example: 'Hello {{ someone }}'
    MergeResponse:
      type: array
      items:
        $ref: '#/components/schemas/TransactionResponse'
    MessageAssociation:
      type: object
      required:
        - msgId
        - to
      properties:
        msgId:
          type: string
          description: A corresponding message uuid
          format: uuid
          example: 00000000-0000-0000-0000-000000000000
        to:
          type: array
          items:
            type: string
          description: An array of recipient email addresses that this message will go to
          example:
            - baz@gov.bc.ca
    MessageObject:
      type: object
      required:
        - bodyType
        - body
        - from
        - to
        - subject
      properties:
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/AttachmentObject'
          description: A list of recipient emails
        bcc:
          type: array
          items:
            type: string
          description: >-
            An array of recipients email addresses that will appear on the BCC:
            field
          example:
            - foo@gov.bc.ca
        bodyType:
          type: string
          description: 'The email body type (html = content with html, text = plaintext)'
          enum:
            - html
            - text
          example: html
        body:
          type: string
          description: >-
            The body of the message as an Unicode string, Buffer, Stream or an
            attachment-like object
          example: Hello World content
        cc:
          type: array
          items:
            type: string
          description: >-
            An array of recipients email addresses that will appear on the CC:
            field
          example:
            - bar@gov.bc.ca
        delay:
          type: integer
          description: number of milliseconds to delay the message before queueing
          example: 60000
        encoding:
          type: string
          description: >-
            Identifies encoding for text/html strings (defaults to 'utf-8',
            other values are 'hex' and 'base64')
          enum:
            - base64
            - binary
            - hex
            - utf-8
          example: utf-8
        from:
          type: string
          description: >-
            The email address of the sender. All email addresses can be plain
            'sender@server.com' or formatted '"Sender Name" sender@server.com'
          example: example@gov.bc.ca
        priority:
          type: string
          description: >-
            Sets message importance headers, either 'high', 'normal' (default)
            or 'low'.
          enum:
            - normal
            - low
            - high
          example: normal
        subject:
          type: string
          description: The email subject
          example: Hello user
        to:
          type: array
          items:
            type: string
          description: >-
            An array of recipients email addresses that will appear on the To:
            field
          example:
            - baz@gov.bc.ca
    NotFound:
      allOf:
        - $ref: '#/components/schemas/Problem'
        - type: object
          properties:
            status:
              example: 404
            title:
              example: Not Found
            type:
              example: 'https://httpstatuses.com/404'
    Problem:
      type: object
      required:
        - status
        - title
        - type
      properties:
        details:
          type: string
          description: contains a message about the failure
          example: Error message
        status:
          type: integer
          description: http status code
        title:
          type: string
          description: http status description
        type:
          type: string
          description: reference for the error
    StatusObject:
      type: object
      properties:
        delayUntil:
          type: integer
          description: UTC time to delay queueing the message for sending
          example: 1570000000
        log:
          type: array
          items:
            type: string
          description: An array of log strings regarding this message
          example:
            - Log message here
        msgId:
          type: string
          description: This message instance uuid
          format: uuid
          example: 00000000-0000-0000-0000-000000000000
        result:
          type: object
          description: A subset of the SMTP server response if message was sent
          example:
            messageId: <00000000-0000-0000-0000-000000000000@gov.bc.ca>
        status:
          type: string
          description: The state of this message in the queue
          enum:
            - active
            - completed
            - delayed
            - failed
            - paused
            - stuck
            - waiting
          example: completed
        tag:
          type: string
          description: A unique string which is associated with the message
          example: tag
        timestamp:
          type: integer
          description: UTC time the service originally received this message queue request
          example: 1560000000
        txId:
          type: string
          description: The associated transaction uuid
          format: uuid
          example: 00000000-0000-0000-0000-000000000000
    TransactionResponse:
      type: object
      required:
        - txId
        - messages
      properties:
        messages:
          type: array
          items:
            $ref: '#/components/schemas/MessageAssociation'
        txId:
          type: string
          description: A corresponding transaction uuid
          format: uuid
          example: 00000000-0000-0000-0000-000000000000
    ValidationError:
      type: object
      description: An object containing a validation error
      properties:
        location:
          type: string
          description: Which part of the query the error is in
          example: body
        msg:
          type: string
          description: Details on why error was detected
          example: Invalid value `to`
        param:
          type: string
          description: Which parameter caused the error
          example: contexts
        value:
          type: object
          description: The erroneous value
          example: {}
  responses:
    BadRequest:
      description: Request is missing content or is malformed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadRequest'
    Error:
      description: Unexpected error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Forbidden:
      description: Lack required role to perform action
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotFound'
    UnauthorizedError:
      description: Access token is missing or invalid
